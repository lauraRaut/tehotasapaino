@using Newtonsoft.Json;
@model IndexViewModel
@{
    ViewData["Title"] = "Home Page";
}
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<div class="text-center">
    <h1 class="display-4">Welcome @(Model.loggedInPerson.FirstName)</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <p> Maria testaa</p>
</div>

@{
    if (!Model.loggedInPerson.isRegisteredToService)
    {
        <h2>Please Register</h2>
    }
}
<!-- enctype ="multipart/form-data" = Encoding type that MUST be specified in HTML to enable file upload.    -->
<form action="BufferedSingleFileUploadPhysical/?handler=Upload"
      enctype="multipart/form-data" onsubmit="uploadFile(this);return false;" method="post">
    <dl>
        <dt>
            <label for="FileUpload_FormFile">File</label>
        </dt>
        <dd>
            <input id="FileUpload_FormFile" type="file" name="FileUpload.FormFile" />
        </dd>
    </dl>

    <input class="btn" type="submit" value="Upload" />

    <div style="margin-top:15px">
        <output name="result"></output>
    </div>
</form>

<div class="chart-container chartSpace mt-3 text-center">
    <canvas id="myChart" class="bg-white text-center"></canvas>
</div>






<div id="appdata" data-obj="@JsonConvert.SerializeObject(Model.dayAHeadPriceData.DayAheadPrices)"></div>
<script type="text/javascript">

    const topicData = JSON.parse(document.getElementById('appdata').dataset.obj);
    console.log(topicData);
    console.log(topicData[0].position);
    

    const priceList = topicData.map(sortPricesFromData);

    function sortPricesFromData(topicData) {
        return topicData.priceamount;
    }

    console.log(priceList);

    const hourPositionList = topicData.map(sortPositionsFromData);

    function sortPositionsFromData(topicData) {
        return topicData.position;
    }

    console.log(hourPositionList);

    

  
    
    

    const ctx = document.getElementById("myChart");
    // Mychartista voi tehdä funktion, joka ottaa sisään x ja y koordinaatit sisään

    const myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: hourPositionList,
            datasets: [{
                label: 'Sähkönhinta',
                data: priceList,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {

                    beginAtZero: true
                }
            }
        }

    });


</script>

<div>Api result</div>

<div>@ViewData["ApiResult"]</div>
